# [searchbnf.conf](http://docs.splunk.com/Documentation/Splunk/latest/Admin/Searchbnfconf)
#Based on the Splunk SDK for python example http://dev.splunk.com/view/python-sdk/SP-CAAAEU2 countmatches.py, searchcommands_app
[streamfilter-command]
syntax = STREAMFILTER FIELDNAME=<field name in events> PATTERN=<field name containing regular_expression> <field_list from events>
alias =
shortdesc = Returns the non-overlapping matches to a regular expression in a search result.
description = \
    This command augments records with a single-value version of non-overlapping matches to the regular expression \
    specified by PATTERN. The result is stored in the field specified by FIELDNAME. If FIELDNAME exists, its value is \
    replaced. If FIELDNAME does not exist, it is created. Results are otherwise passed through to the next pipeline \
    processor unmodified.
comment1 = \
    This example returns the matching part of the text (field named text) of each tweet in the tweets lookup table and puts the result \
    in word_field.
example1 = \
    | inputlookup tweets | eval pattern="\\w+" | streamfilter fieldname=word_field pattern=pattern text
category = streaming
#appears-in = 1.2
usage = public
#tags = searchcommands_app

[streamfilterwildcard-command]
syntax = STREAMFILTERWILDCARD FIELDNAME=<field name in events> PATTERN=<field name containing wildcard pattern> <field_list from events>
alias =
shortdesc = Returns the non-overlapping matches to a wildcard pattern in a search result.
description = \
    This command augments records with a single-value version of non-overlapping matches to the wildcard pattern \
    specified by PATTERN. The result is stored in the field specified by FIELDNAME. If FIELDNAME exists, its value is \
    replaced. If FIELDNAME does not exist, it is created. Results are otherwise passed through to the next pipeline \
    processor unmodified.
comment1 = \
    This example returns the matching part of the text (field named text) of each tweet in the tweets lookup table and puts the result \
    in word_field.
example1 = \
    | inputlookup tweets | eval pattern="a*" | streamfilterwildcard fieldname=word_field pattern=pattern text
category = streaming
#appears-in = 1.2
usage = public
#tags = searchcommands_app

[changedispatchttl-command]
syntax = CHANGEDISPATCHTTL APPNAME=<string> OWNER=<optional> SHARING=<optional> NEWTTL=<string> SAVEDSEARCH=<string>
shortdesc = Provided with an app name, owner, sharing level, saved search name and TTL value this changes the dispatch.ttl value of a saved search
description = \
    Provided with an app name, owner, sharing level, saved search name and TTL value this changes the dispatch.ttl value of a saved search \
    the sharing if not set will try a private level object and then an app level object, or it can be explicitly set\
    using the owner= field only works for those with admin level access \
    Finally, note the dispatch.ttl only applies if no actions are used on the saved search, use changedispatchttlall for all dispatch ttl values
comment1 = \
    This changes the saved search testreport to a dispatch TTL of 5m
example1 = | changedispatchttl appname=exampleapp newttl=5m
comment2 = \
    This changes the saved search testreport in a private context to a dispatch TTL of 5m
example2 = | changedispatchttl appname=exampleapp newttl=5m sharing=private
category = generating
usage = public

[listdispatchttl-command]
syntax = LISTDISPATCHTTL APPNAME=<string> OWNER=<optional> SHARING=<optional> SAVEDSEARCH=<string>
shortdesc = Provided with an app name, owner, sharing level and saved search name this lists the dispatch.ttl value of a saved search
description = \
    Provided with an app name, owner, sharing level and saved search name this lists the dispatch.ttl value of a saved search \
    using the owner= field only works for those with admin level access\
    Finally, note the dispatch.ttl only applies if no actions are used on the saved search, use listdispatchttlall for all dispatch ttl values
comment1 = \
    This lists the dispatch.ttl of saved search testreport
example1 = | listdispatchttl appname=exampleapp
comment2 = \
    This lists the dispatch.ttl value of saved search testreport in a private context
example2 = | listdispatchttl appname=exampleapp sharing=private
category = generating
usage = public

[changedispatchttlall-command]
syntax = CHANGEDISPATCHTTLALL APPNAME=<string> OWNER=<optional> SHARING=<optional> NEWTTL=<string> SAVEDSEARCH=<string>
shortdesc = Provided with an app name, owner, sharing level, saved search name and TTL value this changes the dispatch.ttl and any action.*.ttl values of a saved search
description = \
    Provided with an app name, owner, sharing level, saved search name and TTL value this changes the dispatch.ttl any action.*.ttl values of a saved search \
    the sharing if not set will try a private level object and then an app level object, or it can be explicitly set\
    using the owner= field only works for those with admin level access \
    If you only want to change the dispatch.ttl use changedispatchttl
comment1 = \
    This changes the saved search testreport to a dispatch TTL of 5m for all alert actions and dispatch.ttl values
example1 = | changedispatchttlall appname=exampleapp newttl=5m
comment2 = \
    This changes the saved search testreport in a private context to a dispatch TTL of 5m for all alert actions and dispatch.ttl values
example2 = | changedispatchttlall appname=exampleapp newttl=5m sharing=private
category = generating
usage = public

[listdispatchttlall-command]
syntax = LISTDISPATCHTTLALL APPNAME=<string> OWNER=<optional> SHARING=<optional> SAVEDSEARCH=<string>
shortdesc = Provided with an app name, owner, sharing level and saved search name this lists the dispatch.ttl and any action.*.ttl values of a saved search
description = \
    Provided with an app name, owner, sharing level and saved search name this lists the dispatch.ttl and any action.*.ttl values of a saved search \
    using the owner= field only works for those with admin level access\
    If you only want to list the dispatch.ttl use listdispatchttl
comment1 = \
    This lists the dispatch.ttl and all action.*.ttl values of saved search testreport
example1 = | listdispatchttlall appname=exampleapp
comment2 = \
    This lists the dispatch.ttl and all action.*.ttl values of saved search testreport in a private context
example2 = | listdispatchttlall appname=exampleapp sharing=private
category = generating
usage = public

